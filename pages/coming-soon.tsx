/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable @typescript-eslint/ban-ts-comment */
import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'

const About: NextPage = () => {

  interface timer {
    days: number,
    hours: number,
    minutes: number,
    seconds: number,
    expired: boolean,
  }

  // @ts-ignore
  const [timer, setTimer] = useState<timer>({});
  const endDate = new Date("Aug 25, 2022 00:00:00").getTime();
  const startDate = new Date("Jul 1, 2022 00:00:00").getTime();

  useEffect(() => {
    timerSetter()
  }, [])

  const getTimePercentage = () => {
    const now = new Date().getTime();
    const totalTime = endDate - startDate;
    const progress = now - startDate;
    const percentage = (progress / totalTime) * 100;

    const finalVal = Math.round((360/100) * percentage);
    return finalVal;
  }
  
  const timerSetter = () => {
    const x = setInterval(function() {
      const now = new Date().getTime();
      const distance = endDate - now;

      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);

      const timerObj: timer = {
        days: days,
        hours: hours,
        minutes: minutes,
        seconds: seconds,
        expired: false
      }

      if (distance < 0) {
        clearInterval(x);
        setTimer({
          days: 0,
          hours: 0,
          minutes: 0,
          seconds: 0,
          expired: true
        })
      }

      setTimer(timerObj);
    }, 1000);
  }

  const timerTemplate = (timerElem:number, timerLabel:string) => {
    return(
      <div className="circle-wrap">
      <div className="circle">
        <div className="mask full" style={{transform: `rotate(${getTimePercentage()}deg)`}}>
          <div className="fill" style={{transform: `rotate(${getTimePercentage()}deg)`}}></div>
        </div>
        <div className="mask half">
          <div className="fill" style={{transform: `rotate(${getTimePercentage()}deg)`}}></div>
        </div>
        <div className="inside-circle flex flex-col items-center justify-center h-screen">
          <div className='timerNumber'>{timerElem}</div>
          <div className='timerLabel'>{timerLabel}</div>
        </div>
      </div>
    </div>
    )
  }

  return (
    <div>
      <Head>
        <title>Next App Typescript Boilerplate</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="grid h-screen place-items-center">
      <div className="countdownContainer flex justify-between w-4/12">
        { !timer.expired ? 
          <>
            <div className="days">
              {timerTemplate(timer.days, 'days')}
            </div>

            <div className="hours">
              {timerTemplate(timer.hours, 'hours')}
            </div>

            <div className="minutes">
              {timerTemplate(timer.minutes, 'minutes')}
            </div>

            <div className="seconds">
              {timerTemplate(timer.seconds, 'seconds')}
            </div>
          </>
          :
          <>
            <p>EXPIRED</p>
          </>
        }
        </div>
      </main>

      <footer>
        <p>Footer</p>
      </footer>
    </div>
  )
}

export default About
